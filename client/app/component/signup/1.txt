import XSvg from '../svgs/X'
import { MdOutlineMail } from 'react-icons/md'
import { FaUser } from 'react-icons/fa'
import { MdPassword } from 'react-icons/md'
import { MdDriveFileRenameOutline } from 'react-icons/md'
import { SignUpService } from 'service/SignUp.service'
import Link from 'next/link'
import { SubmitHandler } from 'react-hook-form'
import { SignUpProps } from 'model/SignUp.model'
import ToastAlert from '../toast/ToastAlert'

export default function SignUpIndex() {
    const { SignUpForm } = SignUpService()

    const onSubmit: SubmitHandler<SignUpProps> = async (data) => {
        await new Promise((resolve) => setTimeout(resolve, 1000))
        ToastAlert('success', 'SignUp Successfully')
        console.log(data)
    }


    return (
        <div className="max-w-screen-xl mx-auto flex h-screen px-10">
            <div className="flex-1 hidden lg:flex items-center justify-center">
                <XSvg className="lg:w-2/3 fill-white" />
            </div>
            <div className="flex-1 flex flex-col justify-center items-center">
                <form
                    className="lg:w-2/3 mx-auto md:mx-20 flex gap-4 flex-col"
                    onSubmit={SignUpForm.handleSubmit(onSubmit)}
                >
                    <h1 className="text-4xl font-extrabold text-white">
                        Join today.
                    </h1>
                    <label className="input input-bordered rounded flex items-center gap-2">
                        <MdOutlineMail />
                        <input
                            {...SignUpForm.register('email', {
                                required: 'Email is required',
                            })}
                            type="email"
                            className="grow"
                            placeholder="Email"
                            name="email"
                        />
                    </label>
                    {SignUpForm.formState.errors.email && (
                        <p className="text-red-500">
                            {SignUpForm.formState.errors.email.message}
                        </p>
                    )}
                    <div className="flex gap-4 flex-wrap">
                        <label className="input input-bordered rounded flex items-center gap-2 flex-1">
                            <FaUser />
                            <input
                                {...SignUpForm.register('username', {
                                    required: 'Username is required',
                                })}
                                type="text"
                                className='grow'
                                placeholder="Username"
                                name="username"
                            />
                        </label>
                        {SignUpForm.formState.errors.username && (
                            <p className="text-red-500">
                                {SignUpForm.formState.errors.username.message}
                            </p>
                        )}
                        <label className="input input-bordered rounded flex items-center gap-2 flex-1">
                            <MdDriveFileRenameOutline />
                            <input
                                {...SignUpForm.register('fullName', {
                                    required: 'Full Name is required',
                                })}
                                type="text"
                                className={`grow ${
                                    SignUpForm.formState.errors.fullName
                                        ? 'border-red-500'
                                        : ''
                                }`}
                                placeholder="Full Name"
                                name="fullName"
                            />
                        </label>
                        {SignUpForm.formState.errors.fullName && (
                            <p className="text-red-500">
                                {SignUpForm.formState.errors.fullName.message}
                            </p>
                        )}
                    </div>
                    <label className="input input-bordered rounded flex items-center gap-2">
                        <MdPassword />
                        <input
                            {...SignUpForm.register('password', {
                                required: 'Password is required',
                            })}
                            type="password"
                            className={`grow ${
                                SignUpForm.formState.errors.password
                                    ? 'border-red-500'
                                    : ''
                            }`}
                            placeholder="Password"
                            name="password"
                        />
                    </label>
                    {SignUpForm.formState.errors.password && (
                        <p className="text-red-500">
                            {SignUpForm.formState.errors.password.message}
                        </p>
                    )}
                    <button
                        type="submit"
                        className="btn rounded-full btn-primary text-white flex items-center"
                        disabled={SignUpForm.formState.isSubmitting}
                    >
                        {SignUpForm.formState.isSubmitting ? (
                            <>
                                <span className="spinner"></span>Loading...
                            </>
                        ) : (
                            'Sign Up'
                        )}
                    </button>
                </form>
                <div className="flex flex-col lg:w-2/3 gap-2 mt-4">
                    <p className="text-white text-lg">
                        Already have an account?
                    </p>
                    <Link href="/login">
                        <button className="btn rounded-full btn-primary text-white btn-outline w-full">
                            Sign in
                        </button>
                    </Link>
                </div>
            </div>
        </div>
    )
}
